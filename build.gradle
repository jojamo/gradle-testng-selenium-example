/*
* Plugins get defined here
* Example: Using a test logger plugin to print test outputs to console
*/
plugins {
  id "groovy"
  id "java"
}

version = '1.0'

/*
 * Declare version of Java gradle should use
 */
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

/*
 * Sources where gradle should look for dependencies
 */
repositories {
    mavenCentral()
    jcenter()
}

/*
 * Dependencies to download if not present in project
 * Example:
 *      - TestNG for tests
 *      - Selenium for browser automation
 *      - WebDriverManager to automate the management of binary drivers required by selenium
 */
dependencies {
    implementation gradleApi()
    implementation "org.testng:testng:7.1.0"
    implementation "org.seleniumhq.selenium:selenium-server:4.0.0-alpha-2"
    implementation "org.seleniumhq.selenium:selenium-java:4.0.0-beta-1"
    implementation "io.github.bonigarcia:webdrivermanager:4.3.1"
}

/*
 * This is the gradle task to be executed (cli: gradle clean test)
 * useTestNG() tells gradle to use TestNG 
 */
test{
    useTestNG()

    // Force tests to always run, even if they haven't been updated (using "gradle clean" ensures this anyway)
    outputs.upToDateWhen { false }
    testLogging.events "passed", "skipped", "failed"
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = "full"
}

/* 
 * Task definition with name 'smokeTests' (cli: gradle clean smokeTests)
 * We define the group name by using ‘includeGroups’ parameter
 * Only tests with the group name tag will be run. 
 */
task smokeTests(type: Test) {
    useTestNG() {
        includeGroups 'smoke'
    }
}
task regressionTests(type: Test) {
    useTestNG() {
        includeGroups 'regression'
    }
}
task suiteTest(type: Test) {
    useTestNG() {
        suites "src/test/suite/suite.xml"
    }
}